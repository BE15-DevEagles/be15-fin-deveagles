[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "deveagles-analytics"
version = "0.1.0"
description = "Customer retention analytics service for beauty salon CRM"
readme = "README.md"
requires-python = ">=3.11,<3.12"
license = { text = "MIT" }
authors = [
    { name = "DevEagles Team", email = "dev@deveagles.com" },
]
keywords = ["analytics", "crm", "customer-retention", "ml"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pandas>=2.1.3",
    "numpy>=1.24.0",
    "matplotlib>=3.8.0",  # 시각화
    "seaborn>=0.13.0",   # 고급 시각화
    "plotly>=5.18.0",    # 인터랙티브 시각화
    "dash>=2.14.0",      # 대시보드 프레임워크
    "dash-bootstrap-components>=1.5.2",  # React 18 대응
    "duckdb>=0.9.2",
    "sqlalchemy>=1.4.0,<2.0.0",  # Airflow 호환성을 위해 1.4 버전 사용
    "pymysql>=1.1.0",
    "requests>=2.31.0",
    "apache-airflow>=2.7.0",
    "apache-airflow-providers-common-sql>=1.7.1",
    "apache-airflow-providers-smtp>=2.1.0",
    "apscheduler>=3.10.4",  # 스케줄링
    "pytz>=2023.3",  # 타임존 지원
    "pyyaml>=6.0.1",
    "python-multipart>=0.0.6",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "ruff>=0.1.6",
]

spark = [
    "pyspark>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/deveagles/analytics"
Documentation = "https://deveagles.github.io/analytics"
Repository = "https://github.com/deveagles/analytics.git"
Issues = "https://github.com/deveagles/analytics/issues"

[project.scripts]
analytics-server = "analytics.cli:serve"
analytics-etl = "analytics.cli:etl"
analytics-train = "analytics.cli:train"

[tool.hatch.version]
path = "src/analytics/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/analytics"]

# Testing
[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=analytics --cov-report=term-missing"

# Code formatting
[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

# Type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "B", "I"]
ignore = []

# Coverage
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 