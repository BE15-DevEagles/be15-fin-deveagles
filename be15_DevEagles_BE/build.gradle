plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.diffplug.spotless" version "6.20.0"
    id 'jacoco'
}

spotless {
    java {
        importOrder('java', 'javax', 'org', 'com', '')
        removeUnusedImports()
        googleJavaFormat('1.27.0')
        formatAnnotations()
    }
}

group = 'com.deveagles'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // mongodb
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.modelmapper:modelmapper:3.2.0'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mariadb.jdbc:mariadb-java-client'
    testRuntimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // QueryDSL
    implementation 'io.github.openfeign.querydsl:querydsl-jpa:5.6.1:jakarta'
    implementation 'io.github.openfeign.querydsl:querydsl-core:5.6.1'
    annotationProcessor 'io.github.openfeign.querydsl:querydsl-apt:5.6.1:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.3'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    // Elasticsearch
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // sms
    // https://mvnrepository.com/artifact/org.json/json
    implementation 'net.nurigo:sdk:4.3.2'

    // jakarta mail
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-mail'
    }

    // S3
    implementation("com.amazonaws:aws-java-sdk-s3:1.12.783")
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/entity/**',
                '**/exception/**',
                '**/*Application.class',
                '**/*Config.class',
                '**/*Dto.class',
                '**/*Entity.class',
                '**/*Exception.class'
            ])
        }))
    }
}

// 커버리지 검증 태스크 (선택사항)
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.80 // 80% 커버리지 요구
            }
        }
    }
}

// 커버리지 검증을 테스트 시 자동으로 실행 (선택사항)
// check.dependsOn jacocoTestCoverageVerification

jar {
    enabled = false
}