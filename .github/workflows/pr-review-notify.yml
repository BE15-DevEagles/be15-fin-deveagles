name: Notify Reviewers on PR

on:
  pull_request:
    types: [review_requested]
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Wait for reviewers to settle
        run: sleep 0

      - name: Map GitHub usernames to Discord IDs
        id: map-reviewers
        env:
          USER_MAPPING: ${{ secrets.USER_MAPPING }}
          REVIEWERS_JSON: ${{ toJson(github.event.pull_request.requested_reviewers) }}
        run: |
          echo "üîÑ Mapping GitHub reviewers to Discord mentions..."

          mentions=""

          while read login; do
            # JSONÏóêÏÑú Discord ID Ï∞æÍ∏∞
            id=$(echo "$USER_MAPPING" | jq -r --arg login "$login" '.[$login] // empty')
            if [ -n "$id" ]; then
              mentions+="<@$id> "
            else
              echo "‚ö†Ô∏è No Discord ID mapped for $login"
            fi
          done < <(echo "$REVIEWERS_JSON" | jq -r '.[].login')

          echo "mentions=$mentions" >> "$GITHUB_OUTPUT"

      - name: Check if notification already sent
        id: check
        run: |
          mkdir -p .cache
          SENT_FILE=".cache/sent-${{ github.event.pull_request.number }}.flag"

          if [ -f "$SENT_FILE" ]; then
            echo "üîÅ Already sent notification for this PR. Skipping..."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "‚úÖ Sending notification for the first time."
            touch "$SENT_FILE"
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Send Discord Notification
        if: steps.check.outputs.skip == 'false'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          MENTIONS: ${{ steps.map-reviewers.outputs.mentions }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
          AUTHOR_NAME: ${{ github.event.pull_request.user.login }}
          AUTHOR_AVATAR: ${{ github.event.pull_request.user.avatar_url }}
          CREATED_AT: ${{ github.event.pull_request.created_at }}
          COMMITS: ${{ github.event.pull_request.commits }}
          CHANGED_FILES: ${{ github.event.pull_request.changed_files }}
        run: |
          # Format the current time in a readable format
          FORMATTED_DATE=$(date "+%YÎÖÑ %mÏõî %dÏùº")

          curl -X POST -H "Content-Type: application/json" \
          -d "{
            \"content\": \"üì£ $MENTIONSÎãò! Pull Request Î¶¨Î∑∞Ïñ¥Î°ú ÏßÄÏ†ïÎêêÏäµÎãàÎã§. ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.\\nüîó PR: $PR_URL\",
            \"embeds\": [
              {
                \"title\": \"$PR_TITLE\",
                \"url\": \"$PR_URL\",
                \"color\": 16737792,
                \"author\": {
                  \"name\": \"$AUTHOR_NAME\",
                  \"icon_url\": \"$AUTHOR_AVATAR\"
                },
                \"fields\": [
                  {
                    \"name\": \"üìÇ Î≥ÄÍ≤ΩÎêú ÌååÏùº\",
                    \"value\": \"$CHANGED_FILESÍ∞ú\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"üìù Ïª§Î∞ã\",
                    \"value\": \"$COMMITSÍ∞ú\",
                    \"inline\": true
                  }
                ],
                \"footer\": {
                  \"text\": \"$REPO_NAME ‚Ä¢ #$PR_NUMBER ‚Ä¢ $FORMATTED_DATE\"
                },
                \"thumbnail\": {
                  \"url\": \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"
                }
              }
            ],
            \"allowed_mentions\": {
              \"parse\": [\"users\"]
            }
          }" \
          "$DISCORD_WEBHOOK_URL"
