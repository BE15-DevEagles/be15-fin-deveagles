name: Deploy Python Server to DockerHub and AWS EC2

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "be15_DevEagles_DA/**"

jobs:
  build-and-push:
    name: Build and Push Python Server to DockerHub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./be15_DevEagles_DA
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
          no-cache: true

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'ENDSSH'
            # Install Docker if not exists
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo \"\$VERSION_CODENAME\") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker ubuntu
            fi
            
            # Install Docker Compose if not exists
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Create deployment directory
            mkdir -p /home/ubuntu/deveagles-da
            cd /home/ubuntu/deveagles-da
            
            # Create docker-compose.yml
            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            services:
              deveagles-da:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
                container_name: deveagles-da
                ports:
                  - "80:8080"
                  - "8050:8050"
                  - "8000:8000"
                environment:
                  - CRM_DATABASE_URL=mysql+pymysql://${{ secrets.RDS_USERNAME }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}?charset=utf8mb4
                  - ANALYTICS_DB_PATH=/opt/airflow/data/analytics.duckdb
                  - LOG_LEVEL=INFO
                  - DEBUG=false
                  - SSL_CA_CERT_PATH=/opt/ssl/rds-ca-2019-root.pem
                  - SSL_VERIFY_CERT=true
                volumes:
                  - ./data:/opt/airflow/data
                  - ./logs:/opt/airflow/logs
                restart: always
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 30s
            EOF
            
            # Create data and logs directories
            mkdir -p data logs
            
            # Stop and remove existing container
            sudo docker-compose down || true
            
            # Pull latest image and start
            sudo docker-compose pull
            sudo docker-compose up -d
            
            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            timeout 300 bash -c 'until sudo docker-compose ps | grep -q "healthy\|Up"; do sleep 5; done' || {
              echo "Container failed to start properly"
              sudo docker-compose logs
              exit 1
            }
            
            echo "Deployment completed successfully!"
            sudo docker-compose ps
          ENDSSH