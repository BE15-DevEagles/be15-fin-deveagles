name: Deploy Python Server to DockerHub and AWS Elastic Beanstalk

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "be15_DevEagles_DA/**"

jobs:
  build-and-push:
    name: Build and Push Python Server to DockerHub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./be15_DevEagles_DA
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
          no-cache: true

  deploy:
    name: Deploy Python Server to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Dockerrun.aws.json with environment variables
        run: |
          # Update Docker image name
          sed -i "s|your-dockerhub-username/your-repo-name|${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}|g" be15_DevEagles_DA/Dockerrun.aws.json
          
          # Add environment variables to Dockerrun.aws.json (version 1 format)
          jq --arg crm_url "mysql+pymysql://${{ secrets.RDS_USERNAME }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_HOSTNAME }}:${{ secrets.RDS_PORT }}/${{ secrets.RDS_DB_NAME }}?charset=utf8mb4" \
             '. + {
               "Environment": [
                 {"name": "CRM_DATABASE_URL", "value": $crm_url},
                 {"name": "ANALYTICS_DB_PATH", "value": "/opt/airflow/data/analytics.duckdb"},
                 {"name": "LOG_LEVEL", "value": "INFO"},
                 {"name": "DEBUG", "value": "false"},
                 {"name": "SSL_CA_CERT_PATH", "value": "/opt/ssl/rds-ca-2019-root.pem"},
                 {"name": "SSL_VERIFY_CERT", "value": "true"}
               ]
             }' be15_DevEagles_DA/Dockerrun.aws.json > temp.json && mv temp.json be15_DevEagles_DA/Dockerrun.aws.json

      - name: Handle failed Elastic Beanstalk environment
        run: |
          echo "Checking environment status..."
          
          # Get environment details
          ENV_DETAILS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ secrets.AWS_ENVIRONMENT_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --output json)
          
          ENV_STATUS=$(echo "$ENV_DETAILS" | jq -r '.Environments[0].Status // "NotFound"')
          ENV_HEALTH=$(echo "$ENV_DETAILS" | jq -r '.Environments[0].Health // "Unknown"')
          
          echo "Environment Status: $ENV_STATUS"
          echo "Environment Health: $ENV_HEALTH"
          
          # Check if environment is in failed state
          if [[ "$ENV_STATUS" == "Ready" && "$ENV_HEALTH" == "Ok" ]]; then
            echo "✅ Environment is healthy and ready for deployment"
          else
            echo "❌ Environment is in failed state. Attempting to rebuild..."
            
            # Force rebuild environment
            echo "Rebuilding environment..."
            aws elasticbeanstalk rebuild-environment \
              --environment-name ${{ secrets.AWS_ENVIRONMENT_NAME }} \
              --region ${{ secrets.AWS_REGION }} || {
              echo "Rebuild failed. Trying to terminate and recreate..."
              
              # If rebuild fails, terminate and recreate
              aws elasticbeanstalk terminate-environment \
                --environment-name ${{ secrets.AWS_ENVIRONMENT_NAME }} \
                --region ${{ secrets.AWS_REGION }} \
                --terminate-resources
              
              echo "Waiting for environment termination..."
              aws elasticbeanstalk wait environment-terminated \
                --environment-names ${{ secrets.AWS_ENVIRONMENT_NAME }} \
                --region ${{ secrets.AWS_REGION }}
              
              echo "Creating new environment..."
              aws elasticbeanstalk create-environment \
                --application-name ${{ secrets.AWS_APPLICATION_NAME }} \
                --environment-name ${{ secrets.AWS_ENVIRONMENT_NAME }} \
                --solution-stack-name "64bit Amazon Linux 2 v3.4.19 running Docker" \
                --region ${{ secrets.AWS_REGION }}
            }
            
            echo "Waiting for environment to be ready..."
            aws elasticbeanstalk wait environment-updated \
              --environment-names ${{ secrets.AWS_ENVIRONMENT_NAME }} \
              --region ${{ secrets.AWS_REGION }} \
              --cli-read-timeout 1800 \
              --cli-connect-timeout 60
            
            echo "✅ Environment is now ready"
          fi

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.AWS_APPLICATION_NAME }}
          environment_name: ${{ secrets.AWS_ENVIRONMENT_NAME }}
          version_label: ${{ github.sha }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: be15_DevEagles_DA/Dockerrun.aws.json
          use_existing_version_if_available: true
